on:
  workflow_call:
    inputs:
      osnick:
        type: string
        required: true
      s3root:
        type: string
        required: true
      s3publicreponame:
        type: string
        required: true
      arch:
        type: string
        required: false
        default: x86_64
      dest_arch:
        type: string
        required: false
        default: x86_64
      rubyversion:
        default: 2.7.2
        type: string
        required: false
      pythonversion:
        default: 3.9
        type: string
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GPG_PASSWORD:
        required: true
      GPG_KEY:
        required: true
      PACKAGES_AWS_ACCESS_KEY_ID:
        required: true
      PACKAGES_AWS_SECRET_ACCESS_KEY:
        required: true

jobs:

  publish-debs:
    name: Publish [${{ inputs .osnick }}]
    runs-on: ubuntu-latest

    steps:
      - name: get version from tag
        id: get_tag_version
        run: |
          realversion="${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=VERSION::$realversion"
      - uses: actions/checkout@v2
        with:
          repository: redis-stack/redis-stack
          ref: ${{steps.get_tag_version.outputs.VERSION}}

      - name: install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{inputs.pythonversion}}
      - uses: ruby/setup-ruby@v1
      - name: install package tools
        run: |
          gem install deb-s3
      - name: install poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true
      - name: get package version
        id: get_version
        run: |
          poetry install
          source .venv/bin/activate
          realversion=`invoke version -p redis-stack-server -d true`
          echo "::set-output name=VERSION::$realversion"
      - uses: s3-actions/s3cmd@v1.1
        with:
          provider: aws
          region: us-east-1
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: install gpg key
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import

      - name: get gpg_keygrip
        id: get_gpg_keygrip
        run: |
          keygrip=`gpg -k --with-keygrip |sed -n 5p|cut -d '=' -f 2-2`
          echo "::set-output name=GPG_KEYGRIP::$keygrip"

      - name: get gpg_id
        id: get_gpg_id
        run: |
          gpg_id=`gpg --list-keys|sed -n 4p|awk '{print $1}'`
          echo "GPG_ID=$gpg_id" >> $GITHUB_OUTPUT

      - name: publish debs
        run: |
          s3cmd get ${{inputs.s3root}}/redis-stack-server-${{ steps.get_version.outputs.VERSION }}.${{ inputs.osnick }}.${{ inputs.arch }}.deb \
            redis-stack-server-${{ steps.get_version.outputs.VERSION }}.${{ inputs.osnick }}.${{ inputs.dest_arch }}.deb
          ls
          echo allow-preset-passphrase > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          /usr/lib/gnupg/gpg-preset-passphrase -P '${{ secrets.GPG_PASSWORD }}' -c --preset ${{ steps.get_gpg_keygrip.outputs.GPG_KEYGRIP }}
          deb-s3 upload --s3-region us-east-2 \
            --bucket ${{inputs.s3publicreponame}} \
            --codename ${{ inputs.osnick }} \
            --preserve-versions \
            --sign ${{steps.get_gpg_id.outputs.GPG_ID}} \
            --prefix \
            deb \
            *${{ inputs.osnick }}*.deb
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PACKAGES_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY : ${{ secrets.PACKAGES_AWS_SECRET_ACCESS_KEY}}
